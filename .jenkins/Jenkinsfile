def hipBuildTest(String backendLabel) {
        node(backendLabel) {
          stage("SYNC - ${backendLabel}") {
            // Delete the workspace
            sh "rm -rf ${env.WORKSPACE}/*"
            sh "ls -laRt ${env.WORKSPACE}"
            sh "hostname -I"
            sh "env"
            // Checkout hip repository with the PR patch
            dir("${WORKSPACE}/hip") {
               checkout scm
            }
            dir("${WORKSPACE}/hipanl/hip") {
               checkout scm
               env.HIP_DIR = "${WORKSPACE}/hipanl" + "/hip"
            }

            // Clone hip-tests repository
            dir("${WORKSPACE}/hipanl/hip-tests") {
              git branch: 'develop',
              url: 'https://github.com/ROCm-Developer-Tools/hip-tests'
              env.HIP_TESTS_DIR = "${WORKSPACE}/hipanl" + "/hip-tests"
            }

            // Clone clr repository
            dir("${WORKSPACE}/hipanl/clr") {
              git branch: 'develop',
              credentialsId: 'branch-credentials',
              url: 'https://github.com/ROCm-Developer-Tools/clr'
              env.CLR_DIR = "${WORKSPACE}/hipanl" + "/clr"
            }

            // Clone hipcc repspoitory
            dir("${WORKSPACE}/hipanl/hipcc") {
              git branch: 'develop',
              credentialsId: 'branch-credentials',
              url: 'https://github.com/ROCm-Developer-Tools/hipcc'
              env.HIPCC_DIR = "${WORKSPACE}/hipanl" + "/hipcc"
            }
          }

          stage("BUILD/TEST HIP - ${backendLabel}") {
                sh  """#!/usr/bin/env bash
                if [[ $backendLabel =~ amd ]]; then
                ${WORKSPACE}/hip/.jenkins/amd.sh
                else
                ${WORKSPACE}/hip/.jenkins/nvidia.sh
                fi
                """
          }
        }
}

timestamps {
    node('external-bootstrap') {
        skipDefaultCheckout()

        // labels belonging to each backend - AMD, NVIDIA
        String[] labels = ['hip-amd-mi100-ubu2004', 'hip-nvidia-rtx5000-ubu2004']
        buildMap = [:]

        labels.each { backendLabel ->
            echo "backendLabel: ${backendLabel}"
            buildMap[backendLabel] = { hipBuildTest(backendLabel) }
        }
        buildMap['failFast'] = false
        parallel  buildMap
    }
}
